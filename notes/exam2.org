#+title: Exam 2
#+startup: show2levels
* eg questions
** which of these is a valid tree?
** what are left/right, descendants, ancestors, ... ? (10pts)
** populate a tree (10pts)
** big-o for trees (12pts)
** Multiple choice (68pts)
*** ~9 on hashing
*** ~9 on trees
*** ~9 on AVL
*** ~4 on heaps/treaps
** which operation is used to compute bucket index?
** height of BST built by 12, 24, 23, 48, 47
12
   \
    24
   / \
  23 48
     /
    47
** what is min possible height of AVL tree: 320, 470, 500, 540, 700, 650, 870
        500
       /   \
    470     650
   /        /  \
 320      540   870

* Hash Tables
** hash function
*** desired properties
** hash table
*** insertion
*** retrieval
*** how to use array implementation
*** collision
**** basic methods
**** linear probing
**** quadratic probing
**** clustering
*** chaining
**** using linked list
**** how affect complexity
*** deletion
**** if probing don't remove, mark as deleted
*** complexity
**** average
**** worst
** bucket
* Trees & Balanced Trees
** given picture
+ tree?
+ binary?
** terms
*** node
*** edge
*** parent
*** child
*** sibling
*** root
*** leaf
*** interior node
*** ancestor node
*** descendant node
*** subtree
*** left/right child
*** left/right subtree
*** height tree/subtree
*** complete
*** perfect
*** [#B] balanced
*** path
*** path length
** traversal
*** preorder
*** inorder
*** postorder
** balanced tree
*** average case height O(log n)
*** worst case height O(n)
** rotation
*** left
*** right
*** right-right
*** right-left
*** left-left
*** left-right
** red black tree
*** properties
** AVL
*** what is balanced
*** how it balances
using balance factors at each node
*** when it balances
after insertion or deletion
*** balance factor
** binary search tree
*** search: average & worst Big-O
*** insert: average & worst Big-O
*** delete (before balancing): average & worst Big-O
*** delete by copying
*** result of traversing in order
* Heaps and Treaps
** heap
*** basic properties
*** min-heap vs max-heap
*** when is heap useful
*** how is implemented
**** insertion
**** removal
what nodes are allowed to be removed
*** how heap ensures well-balanced after insertion/deletion
*** priority queue
** treap
*** how treap uses properties of search tree and heap
*** how does treap promote/demote values while retaining search tree
*** how are values inserted
*** how are values deleted
