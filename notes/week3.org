#+title: Week3
* recursion
** head recursion
recurse first, then compute
** tail recursion
compute first, then recurse
* eg
** gcd
#+begin_src haskell
gcd: N -> N -> N
gcd1 a b
  | b < a = gcd1 b a
  | otherwise = gcd (b `mod` a) a

fib: N -> N
fib n
  | n < 2 = n
  | otherwise = (fib (n-1)) + (fib (n-2))
#+end_src

* order
** preorder
** midorder
** postorder
* nontail recursion
** iterative
1. implement stack
2. less clarity & brevity
3. aoeu
* indirect recursion
* excessive recursion
** fibonacci
+ default = $\phi^n$
+ also $O(n), O(\log{n})$
